<?xml version="1.0" encoding="utf-8"?>
<topic id="ed60a42c-a25b-4d46-a88d-611acc5b3869" revisionNumber="1">
<developerConceptualDocument xmlns="http://ddue.schemas.microsoft.com/authoring/2003/5" xmlns:xlink="http://www.w3.org/1999/xlink">

<introduction>

<para>
In this demo, we will show how to implement a simple options strategy. We will 
focus on the following key concepts:
</para>

<list class="bullet">
  <listItem><para>loading option quotes</para></listItem>
  <listItem><para>retrieving the option chain</para></listItem>
  <listItem><para>filtering options</para></listItem>
</list>

<para>
The strategy sells out-of-the-money puts for a premium.
</para>

</introduction>

<section address="Section1"><title>Loading Option Quotes</title><content>

<para>
Before we can simulate any strategy, we need to have quote data available. 
TuringTrader can import quotes in CSV files, like the data available through 
the CBOE Data Shop. To do so, you will need to create a data source descriptor, 
see 
<link xlink:href="17b6a987-0f98-4b8a-9c0c-50491eb1cdbd" />
.
</para>

<para>
For this demo, we go a different route: TuringTrader includes a generator for 
'fake' quotes, calculated from SPX and VIX using the Black-Scholes model 
included in our 
<codeEntityReference qualifyHint="false">T:TuringTrader.Support.OptionSupport</codeEntityReference>
. While these quotes won't be a precise mirror of the markets, they still 
capture the overall vibe.
</para>

<para>
Regardless of where your quotes come from, they will be brought in as a single 
data source. 
</para>

<codeReference>Demo04#AddDataSource</codeReference>

<para>
TuringTrader models each option contract as a separate 
<codeEntityReference qualifyHint="false">T:TuringTrader.Simulator.Instrument</codeEntityReference>
with the following important implications:
</para>

<list class="bullet">
  <listItem><para>
  	there is a one-to-many relationship between the single data source and the 
  	many instruments it creates
  </para></listItem>
  <listItem><para>
  	the list of instruments is dynamic, with options contracts added when they 
  	become available, and removed when they expire
  </para></listItem>
</list>

</content></section>

<section address="Section1"><title>Retrieving the Option Chain</title><content>

<para>
The option chain is a list of instruments, available at a given point in time. 
You can query the option chain in the simulation loop like this:
</para>

<codeReference>Demo04#OptionChain</codeReference>

<para>
This call will typically return several hundred contracts to choose from, so we 
need to filter it to find a suitable contract to trade. We can do so, 
using LINQ.
</para>

</content></section>

<section address="Section1"><title>Selecting an Option Contract</title><content>

<para>
First, we probably want to create a list of available expiry dates. We can 
create this list as follows:
</para>

<codeReference>Demo04#ExpiryDates</codeReference>

<para>
Now, we can pick an expiry with a specific range of days until expiration (DTE):
</para>

<codeReference>Demo04#expiryDate</codeReference>

<para>
And finally, we can select a put contract expiring that very day, and with a 
strike price closest to a given target:
</para>

<codeReference>Demo04#shortPut</codeReference>

<para>
Now that we retrieved have an 
<codeEntityReference qualifyHint="false">T:TuringTrader.Simulator.Instrument</codeEntityReference>
for the contract to trade, everything else is coded just like we showed in 
<link xlink:href="b9bbdb5b-4028-43da-aa9f-be1b08aa7708" />
.
</para>

</content></section>

<section address="Section1"><title>Putting Everything Together</title><content>

<para>
Our demo strategy includes a few more bells and whistles. In particular:
</para>


<list class="bullet">
  <listItem><para>only consider options expiring on the 3rd Friday of the month</para></listItem>
  <listItem><para>calculate strike price based on volatility</para></listItem>
  <listItem><para>close position, if the option contract held is at risk of expiring in the money</para></listItem>
  <listItem><para>position sizing based on margin rules</para></listItem>
</list>

<para>
Please find the full source code 
<externalLink>
<linkText>here</linkText>
<linkUri>https://bitbucket.org/fbertram/fub_tradingsimulator/src/develop/Algorithms/Demo%20Algorithms/Demo04_Options.cs</linkUri>
<linkTarget>_blank</linkTarget>
</externalLink>
.
</para>

</content></section>

<section address="Section1"><title>Further Considerations</title><content>

<para>
TuringTrader is assuming the traded option to be cash-settled and 
European-style, which has significant consequences:
</para>


<list class="bullet">
  <listItem><para>assignment of American-style options will not be modeled accurately</para></listItem>
  <listItem><para>stocks added or removed from the portfolio through option exercise will be 
replaced with a cash transaction for the same amount</para></listItem>
</list>

<para>
Because of these simulator limitations, it is imperative to watch the extrinsic 
value of any short option positions closely, when trading American-style 
options. If an early assignment occurs, the simulator results will be inaccurate.
</para>

</content></section>

<relatedTopics>
</relatedTopics>

</developerConceptualDocument>
</topic>