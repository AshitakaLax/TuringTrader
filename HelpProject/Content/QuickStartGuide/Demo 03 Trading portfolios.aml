<?xml version="1.0" encoding="utf-8"?>
<topic id="c3e8aad4-8d03-4daa-b1f6-4a72d47b6b84" revisionNumber="1">
  <developerConceptualDocument xmlns="http://ddue.schemas.microsoft.com/authoring/2003/5" xmlns:xlink="http://www.w3.org/1999/xlink">
    <introduction>
		<para>
			This demo loads data for a number of sector ETFs, calculates
			indicators on these, creates a portfolio based on the indicator
			values, and re-balances this portfolio. The following key
			concepts are demonstrated:
		</para>
		<list class="bullet">
			<listItem>Strategy initialization for multiple instruments</listItem>
			<listItem>Determining the active instruments</listItem>
			<listItem>Calculating indicators for multiple instruments</listItem>
			<listItem>Portfolio selection</listItem>
			<listItem>Trading the portfolio</listItem>
			<listItem>Creating a trading log</listItem>
		</list>
		<para>
			The portfolio decisions are based on ranking the instruments
			Return over Maximum Drawdown. Please don't use this for actual
			trading.
		</para>
    </introduction>

    <section address="Section1">
		<title>Strategy initialization for multiple instruments</title>
		<content>
		<para>
			The first thing our strategy needs to do, is initialization. The 
			initial lines are just like what we have done in previous demos:
		</para>
		<codeReference>Demo03#Init1</codeReference>
		<para>
			As this demo is going to trade multiple instruments, it is a good
			idea to create some helper fields first:
		</para>
		<codeReference>Demo03#InitHelpers</codeReference>
		<para>
			With these fields in place, we can conveniently add our data sources
			like this:
		</para>
		<codeReference>Demo03#InitDataSources</codeReference>
		<para>
			We are now ready to enter the simulation loop.
		</para>
		</content>
    </section>
    
    <section address="Section2">
    	<title>Determining the active instruments</title>
    	<content>
    	<para>
    		When trading portfolios, we need to keep track of the instruments
    		available at any given bar. Our universe might include instruments,
    		with an IPO later than the start of simulation. There might also
    		be instruments, which were delisted, merged or renamed. In particular,
    		we should check the following:
    	</para>
		<list class="bullet">
    		<listItem>does the instrument have a current bar?</listItem>
    		<listItem>is the instrument part of our univese?</listItem>
    	</list>
    	<para>
    		The following code provides an enumerable with the active instruments:
    	</para>
		<codeReference>Demo03#ActiveInstruments</codeReference>
    	</content>
    </section>

    <section address="Section2">
    	<title>Calculating indicators for multiple instruments</title>
    	<content>
    	<para>
    		Any algorithm probably requires indicators calculated on the active
    		instruments. With TuringTrader, this can be conveniently done with
    		a single Linq expression. However, we need to make sure that every
    		indicator is calculated exactly once per bar. We should therefore
    		store the result in a list or dictionary:
		</para>
		<codeReference>Demo03#Evaluation</codeReference>
		</content>
	</section>
	
    <section address="Section2">
    	<title>Portfolio selection</title>
    	<content>
    	<para>
    		With the indicators calculated, we are now ready to select
    		our portfolio. There are probably multiple criteria we are looking
    		at; in this example we are looking for the RoMaD to be positive,
    		and are limiting our portfolio to a few instruments with the highest
    		RoMaD:
		</para>
		<codeReference>Demo03#Selection</codeReference>
		</content>
	</section>

    <section address="Section2">
    	<title>Trading the portfolio</title>
    	<content>
    	<para>
    		Now that we have our portfolio instruments selected, we are ready
    		to trade them. As previously, we start with determining the amount
    		of equity we'd like to assign to the given instrument. Next, we
    		can determine the number of current and target shares, and trade
    		the difference:
		</para>
		<codeReference>Demo03#Trading</codeReference>
		<para>
			For analysis of trading logs, it might be helpful to attach a
			comment to the order ticket. Here is how we can do so:
		</para>
		<codeReference>Demo03#TradingComment</codeReference>
		<para>
			Our algorithm is now ready to run. Here is how the equity curve
			will look like:
		</para>
		<mediaLink>
			<!-- ><caption>demo 03 chart</caption> -->
			<image xlink:href="demo03_chart-small"/>
		</mediaLink>
		</content>
	</section>

    <section address="Section2">
    	<title>Creating a trading log</title>
    	<content>
    	<para>
    		For detailed analysis of an algorithm, a trading log is needed.
    		TuringTrader keeps information on all transactions in the
    		Log
    		property, which we can collect after the simulation is completed:
		</para>
		<codeReference>Demo03#TradingLog</codeReference>
		<para>
			Excel works best for analyzing trade logs, thanks to its filtering
			features. Here is a snippet of the trading log:
		</para>
		<mediaLink>
			<!-- ><caption>demo 03 log</caption> -->
			<image xlink:href="demo03_log"/>
		</mediaLink>
		</content>
	</section>

    <relatedTopics>
    </relatedTopics>
  </developerConceptualDocument>
</topic>