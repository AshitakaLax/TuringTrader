<?xml version="1.0" encoding="utf-8"?>
<topic id="c3e8aad4-8d03-4daa-b1f6-4a72d47b6b84" revisionNumber="1">
<developerConceptualDocument xmlns="http://ddue.schemas.microsoft.com/authoring/2003/5" xmlns:xlink="http://www.w3.org/1999/xlink">

<introduction>

<para>
In this demo, we load data for several sector ETFs, calculate indicators, 
create a portfolio based on the indicator values, and re-balance this portfolio. We demonstrate the following key concepts: 
</para>


<list class="bullet">
  <listItem><para>initialization for multiple instruments</para></listItem>
  <listItem><para>determining active instruments</para></listItem>
  <listItem><para>calculating indicators for multiple instruments</para></listItem>
  <listItem><para>portfolio selection</para></listItem>
  <listItem><para>placing orders</para></listItem>
  <listItem><para>creating a trading log</para></listItem>
</list>


<para>
The strategy bases its decisions on ranking the instrument's Return over 
Maximum Drawdown. Please don't use this for actual trading. 
</para>

</introduction>

<section address="Section1"><title>Initialization for Multiple Instruments</title><content>

<para>
The first lines of our strategy initialization are identical to what we have 
done for 
<link xlink:href="b9bbdb5b-4028-43da-aa9f-be1b08aa7708" />
: 
</para>

<codeReference>Demo03#Init1</codeReference>

<para>
To access instruments during simulation, we need their nicknames. When trading 
multiple instruments, this quickly gets confusing. To make things easier, it is 
a good idea to set up some helper fields:
</para>

<codeReference>Demo03#InitHelpers</codeReference>

<para>
Using these fields, we can conveniently add our data sources:
</para>

<codeReference>Demo03#InitDataSources</codeReference>

</content></section>

<section address="Section2"><title>Determining the Active Instruments</title><content>

<para>
When trading portfolios, we need to keep track of the instruments available at 
any given bar. Our universe might change over time, with companies having their 
IPO after the simulation started, and merging or delisting their stock before 
the simulation ends.
</para>

<para>
TuringTrader adds instruments to its 
<codeEntityReference qualifyHint="false">P:TuringTrader.Simulator.SimulatorCore.Instruments</codeEntityReference>
collection when they start receiving bars and removes them after they become 
stale. This code snippet provides an enumerable of active instruments:
</para>

<codeReference>Demo03#ActiveInstruments</codeReference>

</content></section>

<section address="Section2"><title>Calculating Indicators for Multiple Instruments</title><content>

<para>
Typical portfolio strategies perform a ranking of instruments, based on 
indicator values. TuringTrader can conveniently calculate indicators for many 
instruments with just a single LINQ expression. To make sure we call our 
indicators exactly once per bar and for each instrument, it is best practice 
to calculate them at the top of the simulation loop and store the results in a 
collection:
</para>

<codeReference>Demo03#Evaluation</codeReference>

</content></section>

<section address="Section2"><title>Portfolio Selection</title><content>

<para>
With the indicators calculated, we are now ready to select our portfolio. 
Again, the code is very concise thanks to using LINQ. In this example, we are 
looking for the RoMaD to be positive, and are limiting our portfolio to a 
subset of instruments with the highest RoMaD: 
</para>

<codeReference>Demo03#Selection</codeReference>

</content></section>

<section address="Section2"><title>Trading the Portfolio</title><content>

<para>
Now that we have our portfolio instruments selected, we are ready to trade 
them. We start by determining the target equity per instrument. Next, we loop 
through all instruments, determine the current position and target position, 
and trade the difference: 
</para>

<codeReference>Demo03#Trading</codeReference>

<para>
For analysis of trading logs, it might be helpful to attach a comment to the 
order ticket. Here is a simple example:
</para>

<codeReference>Demo03#TradingComment</codeReference>

<para>
Our algorithm is now ready to run. Here is how the equity curve looks like, 
compared to a benchmark: 
</para>

<mediaLink>
<!-- ><caption>demo 03 chart</caption> -->
<image xlink:href="demo03_chart-small"/>
</mediaLink>

</content></section>

<section address="Section2"><title>Creating a Trading Log</title><content>

<para>
For a detailed analysis of an algorithm, we need a trading log. TuringTrader 
keeps information on all transactions in the Log property, which we can collect 
after finishing the event loop:
</para>

<codeReference>Demo03#TradingLog</codeReference>

<para>
Excel works best for analyzing trade logs, thanks to its filtering features. 
Here is a snippet of the trading log rendered with Excel:
</para>

<mediaLink>
<!-- ><caption>demo 03 log</caption> -->
<image xlink:href="demo03_log"/>
</mediaLink>

<para>
As always, find the full code for this demo in our
<externalLink>
<linkText>repository</linkText>
<linkUri>https://bitbucket.org/fbertram/fub_tradingsimulator/src/develop/Algorithms/Demo%20Algorithms/Demo03_Portfolio.cs</linkUri>
<linkTarget>_blank</linkTarget>
</externalLink>

.
</para>

</content></section>

<relatedTopics>
</relatedTopics>
</developerConceptualDocument>
</topic>