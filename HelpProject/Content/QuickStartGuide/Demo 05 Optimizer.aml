<?xml version="1.0" encoding="utf-8"?>
<topic id="2989153c-bf3b-43c6-a576-bdf8995b7734" revisionNumber="1">
<developerConceptualDocument xmlns="http://ddue.schemas.microsoft.com/authoring/2003/5" xmlns:xlink="http://www.w3.org/1999/xlink">

<introduction>

<para>
When developing algorithmic trading strategies, we often face situations in 
which we need to quantify a relationship between an outcome and an indicator. 
Creating this quantified relationship is greatly simplified with an optimizer.
</para>

<para>
This demo shows how to use TuringTrader's built-in optimizer. While it does not 
do anything useful, it presents the following concepts:
</para>

<list class="bullet">
  <listItem><para>declaring optimizable parameters</para></listItem>
  <listItem><para>setting the fitness value</para></listItem>
</list>

</introduction>

<section address="Section1"><title>Declaring Optimizable Parameters</title><content>

<para>
For TuringTrader to recognize a parameter as optimizable, the parameter must 
meet the following requirements:
</para>

<list class="bullet">
  <listItem><para>integer-based</para></listItem>
  <listItem><para>public, not static</para></listItem>
  <listItem><para>preceded by the
<codeEntityReference qualifyHint="false">T:TuringTrader.Simulator.OptimizerParam</codeEntityReference>
property</para></listItem>
  <listItem><para>either a field or a property</para></listItem>
</list>

<para>
Here is an example declaring two parameters:

<codeInline>
C#
        [OptimizerParam(0, 90, 10)]
        public int X { get; set; }

        [OptimizerParam(0, 9, 1)]
        public int Y;
</codeInline>
</para>

<para>
The 
<codeEntityReference qualifyHint="false">T:TuringTrader.Simulator.OptimizerParam</codeEntityReference>
attribute takes the following arguments:
</para>

<list class="bullet">
  <listItem><para>start value</para></listItem>
  <listItem><para>end value</para></listItem>
  <listItem><para>step</para></listItem>
</list>

<para>
These arguments are used to initialize the optimizer settings later.
</para>

</content></section>

<section address="Section1"><title>Running the Optimizer</title><content>

<para>
If an algorithm exposes any optimizable parameters, the Optimizer button is 
enabled, as soon as the algorithm is loaded. Clicking on the Optimizer button 
opens the optimizer settings dialog.
</para>

<para>
***image***
</para>

<para>
The start, end, and step values are initialized from the OptimizerParam attributes.
</para>

<para>
At this point, you can take the following actions to set up the optimization:
</para>


<list class="bullet">
  <listItem><para>etting a parameter to a fixed value, by entering a new value in the Value columns</para></listItem>
  <listItem><para>enabling a parameter for optimization, by checking the box in the Optimize column</para></listItem>
  <listItem><para>modifying the start, end, and step values in the respective columns</para></listItem>
</list>

<para>
Once you finished setting up the parameters, you are ready to start the 
optimizer by clicking the Optimize button.
</para>

<para>
TuringTrader's optimizer is multi-threaded and uses all available CPU cores. It, 
therefore, runs best on a machine with many CPU cores. Here is a screenshot from 
optimization on a 16-core i9:
</para>

<para>
***image***
</para>

</content></section>

<section address="Section1"><title>Optimization Results</title><content>

<para>
Once the optimization has finished, TuringTrader opens the results dialog with 
one row per optimizer iteration. Each row contains the following values:
</para>


<list class="bullet">
  <listItem><para>Net Asset Value at the end of the simulation</para></listItem>
  <listItem><para>Maximum Drawdown in percent over the full length of the simulation</para></listItem>
  <listItem><para>Fitness value</para></listItem>
</list>

<para>
To apply the parameters from a specific optimizer iteration, and run a backtest 
with these parameters, double-click the row.
</para>

</content></section>

<section address="Section1"><title>Fitness Value</title><content>

<para>
While it is easy to optimize for maximum return, or minimum drawdown we'd like 
to discourage developers from doing so. Instead, we recommend defining a fitness 
value, capturing your specific optimization objectives, and optimize for that. 
A strategy can assign a custom fitness value through the
<codeEntityReference qualifyHint="false">P:TuringTrader.Simulator.Algorithm.FitnessValue</codeEntityReference>
property.
</para>

<para>
For the demo, we chose to use a non-sensical value:
</para>

<para><codeInline>
C#
            FitnessValue = X + Y;
</codeInline></para>

<para>
For real-life strategies, we recommend a measure of risk-adjusted return. Here 
is an example calculating the return over maximum drawdown:
</para>

<para><codeInline>
C#
FitnessValue = (NetAssetValue[0] / INITIAL_CASH - 1.0) / TradingDays * 252.0 /  NetAssetValueMaxDrawdown;
</codeInline></para>

<para>
Before you start brute-force optimization of multiple parameters, consider 
optimizing smaller subsets of parameters sequentially. Doing so reduces the 
search space significantly, leading to faster results.
</para>

<para>
Also, we recommend playing around with the demo until you fully understand how 
the optimizer is working. The full source code of the demo is available
<link xlink:href="https://bitbucket.org/fbertram/fub_tradingsimulator/src/develop/Algorithms/Demo%20Algorithms/Demo05_Optimizer.cs">here</link>
.
</para>

</content></section>

<relatedTopics>
</relatedTopics>

</developerConceptualDocument>
</topic>