<?xml version="1.0" encoding="utf-8" ?>

<examples>

<item id="Demo02#SetCash"><sampleCode language="CSharp">
Deposit(100000);
</sampleCode></item>

<item id="Demo02#TargetPosition"><sampleCode language="CSharp">
int targetPosition = (int)Math.Floor(NetAssetValue[0] / instrument.Close[0]);
</sampleCode></item>

<item id="Demo02#HighestHigh"><sampleCode language="CSharp">
double highestHigh = NetAssetValue.Highest(21)[0];
</sampleCode></item>

<item id="Demo02#TradeSimple"><sampleCode language="CSharp">
instrument.Trade(100);
</sampleCode></item>

<item id="Demo02#CurrentPositionsSimulator"><sampleCode language="CSharp">
bool allFlat = Positions.Count == 0;
</sampleCode></item>

<item id="Demo02#CurrentPositionInstrument"><sampleCode language="CSharp">
int currentPosition = instrument.Position;
</sampleCode></item>

<item id="Demo02#TradeRecommended"><sampleCode language="CSharp">
instrument.Trade(targetPosition - currentPosition, OrderType.openNextBar);
</sampleCode></item>

<item id="Demo02#MovingAverages"><sampleCode language="CSharp">
// calculate moving averages
ITimeSeries&lt;double&gt; slow = instrument.Close.EMA(63);
ITimeSeries&lt;double&gt; fast = instrument.Close.EMA(21);

// determine current and target position size
int currentPosition = instrument.Position;
int targetPosition = fast[0] > slow[0]
	? (int)Math.Floor(NetAssetValue[0] / instrument.Close[0]) // bullish => long
	: 0;                                                      // bearish => flat

// place orders
instrument.Trade(targetPosition - currentPosition, OrderType.openNextBar);
</sampleCode></item>

</examples>

